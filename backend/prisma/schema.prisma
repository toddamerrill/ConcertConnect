generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(uuid())
  email                  String           @unique
  passwordHash           String?
  firstName              String?
  lastName               String?
  profileImageUrl        String?
  dateOfBirth            DateTime?
  location               Json?
  musicPreferences       Json?
  privacySettings        Json             @default("{}")
  isEmailVerified        Boolean          @default(false)
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  lastLoginAt            DateTime?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  receivedFriendRequests Friendship[]     @relation("FriendshipAddressee")
  sentFriendRequests     Friendship[]     @relation("FriendshipRequester")
  payments               Payment[]
  comments               SocialComment[]
  likes                  SocialLike[]
  posts                  SocialPost[]
  userEvents             UserEvent[]
  musicTaste             UserMusicTaste[]

  @@map("users")
}

model Event {
  id             String       @id @default(uuid())
  externalId     String?      @unique
  title          String
  description    String?
  artistName     String?
  venueName      String?
  venueAddress   Json?
  eventDate      DateTime?
  ticketUrl      String?
  imageUrl       String?
  genre          String?
  priceRange     Json?
  externalSource String?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  payments       Payment[]
  posts          SocialPost[]
  userEvents     UserEvent[]

  @@map("events")
}

model UserEvent {
  id              String   @id @default(uuid())
  userId          String
  eventId         String
  interactionType String
  purchaseData    Json?
  createdAt       DateTime @default(now())
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId, interactionType])
  @@map("user_events")
}

model Friendship {
  id          String   @id @default(uuid())
  requesterId String
  addresseeId String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  addressee   User     @relation("FriendshipAddressee", fields: [addresseeId], references: [id], onDelete: Cascade)
  requester   User     @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId])
  @@map("friendships")
}

model UserMusicTaste {
  id              String   @id @default(uuid())
  userId          String
  spotifyArtistId String?
  artistName      String
  genre           String?
  preferenceScore Float    @default(0.5)
  lastUpdated     DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, artistName])
  @@map("user_music_taste")
}

model RestaurantPartner {
  id                 String   @id @default(uuid())
  name               String
  address            Json
  contactInfo        Json
  discountPercentage Float?
  qrCodeUrl          String?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("restaurant_partners")
}

model SocialPost {
  id        String          @id @default(uuid())
  userId    String
  eventId   String?
  content   String
  imageUrl  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  comments  SocialComment[]
  likes     SocialLike[]
  event     Event?          @relation(fields: [eventId], references: [id])
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("social_posts")
}

model SocialComment {
  id        String     @id @default(uuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  post      SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("social_comments")
}

model SocialLike {
  id        String     @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime   @default(now())
  post      SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("social_likes")
}

model Payment {
  id              String   @id @default(uuid())
  userId          String
  eventId         String?
  stripePaymentId String   @unique
  amount          Int
  currency        String   @default("usd")
  status          String
  description     String?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  event           Event?   @relation(fields: [eventId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}
